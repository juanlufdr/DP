package robots;

import java.util.LinkedList;

import laberinto.Llave;
import laberinto.Puerta;
import laberinto.Sala;
import laberinto.LabSim.Dir;

import ed.Queue;


public class Asimo extends Robot {

	/**
	 * Método constructor parametrizado de la clase Asimo.
	 * 
	 * @param nombre
	 * @param id
	 * @param turno_inicial
	 * @param sala_Actual
	 * @param llaves
	 */
	public Asimo(String nombre, char id, int turno_inicial, Sala sala_Actual) {
		
		super(nombre, id, turno_inicial, sala_Actual);
		
		Llave[] conjuntoLlaves = new Llave[15];
		int iterador=0;
		for (int i = 0; i < 30; i++) {
			if (i%2 != 0){
				conjuntoLlaves[iterador] = new Llave(i);
				iterador++;
			}
		}
		
		for (int i = 0; i < conjuntoLlaves.length; i++) {
			Llave dato = conjuntoLlaves[i];
			llaves_Recogidas.addLast(dato);

		}
	}
	
	/**
	 * Método que realiza todas las acciones del robot Asimo (accionPuerta, movimiento y accionLlave) dependiendo del turno del laberinto y del robot.
	 * 
	 * @param sala_Puerta
	 * 		  Sala en la que se encuentra la puerta.
	 * @param p
	 * 		  Puerta sobre la que se realizará la acción.
	 * @param turno
	 * 		  Turno del laberinto.
	 */
	public void acciones(int sala_Puerta, Puerta p, int turno) {
		if (turno == super.getTurno_Actual()){

			if (super.getSala_Actual().getId_sala() == sala_Puerta) {
				this.accionPuerta(p);
				super.movimiento();
				//super.getSala_Actual().insertarRobot(this);
			} else {
				super.movimiento();
				this.accionLlave();
				
			}
			super.setTurno_Actual(super.getTurno_Actual()+1);
		} else
			super.getSala_Actual().insertarRobot(this);

	}

	/**
	 * Método que realiza la acción de cerrar la puerta.
	 * @param p
	 * 		  Puerta que se quiere cerrar.
	 */
	private void accionPuerta(Puerta p) {
		if (p.estaAbierta()) {
			p.cerrarPuerta();
		}
	}

	/**
	 * Método que realiza la acción de soltar la última llave de la lista de llaves de Asimo en salas pares.
	 */
	private void accionLlave() {
		if ((this.getSala_Actual().getId_sala() % 2) == 0) {
			this.getSala_Actual().getLlaves_sala()
					.addOrder(this.getLlaves_Recogidas().getLast());
			this.getLlaves_Recogidas().removeLast();
			
		}

	}

}
