package laberinto;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Random;

import cargador.Cargador;
import cargador.FicheroCarga;

import robots.Asimo;
import robots.Bender;
import robots.Sonny;
import robots.Spirit;
// prueba

public class LabSim {
	
	/**
	 * Tipo enumerado que representa las 4 posibles direcciones en las que puede
	 * moverse un robot.
	 */
	public enum Dir {S, E, N, O};
		
	/**
	 * Programa principal -EC2.
	 * 
	 * @paramargs Argumentos que recibe el programa principal
	 * @returnRetorna la salida del programa
	 */
	public static void main(String args[]) {
		//int dimX = 6;
		//int dimY = 6;
		//int salaPuerta = (dimX * dimY) - 1;
		//int alturaArbol = 5;
		int maxTurnos = 50;
		
		Laberinto lab = Laberinto.getInstance();
		//lab.construirLaberinto(salaPuerta, dimX, dimY, alturaArbol);
		
		Cargador cargador = new Cargador();
		try {
			/**  
			M�todo que procesa l�nea a l�nea el fichero de entrada inicio.txt
			*/
		     FicheroCarga.procesarFichero("inicio.txt", cargador);
		}
		catch (FileNotFoundException valor)  {
			System.err.println ("Excepci�n capturada al procesar fichero: "+valor.getMessage());
		}
		catch (IOException valor)  {
			System.err.println ("Excepci�n capturada al procesar fichero: "+valor.getMessage());
		}
		lab.kruskal();
		
		
//		int[] idSalasConLlave = { 3, 4, 6, 8, 9, 10, 11, 12, 13 };
//		lab.repartoDeLlaves(idSalasConLlave); 
//		

//		Llave[] conjuntoLlaves = new Llave[15];
//		int iterador=0;
//		for (int i = 0; i < 30; i++) {
//			if (i%2 != 0){
//				conjuntoLlaves[iterador] = new Llave(i);
//				iterador++;
//			}
//		}
//
//		Llave[] combinacion = new Llave[conjuntoLlaves.length];
//
//		lab.generarCombinacion(conjuntoLlaves, 0, (conjuntoLlaves.length-1),
//				combinacion, 0);
		
//		Puerta p = new Puerta();
//		p.setAltura_Apertura(alturaArbol);
//		p.configurarPuerta(combinacion);
//		p.cerrarPuerta();
//		lab.insertarPuerta(p,salaPuerta);
		
		
//		Bender benderB = new Bender("BBRodríguez", 'B', 1, lab.salaInicial());
//		
//		Dir[] direccionesB = {Dir.S, Dir.S, Dir.E, Dir.E, Dir.N, Dir.E, Dir.N, Dir.E, Dir.S,
//				 Dir.E, Dir.S, Dir.S, Dir.O, Dir.S, Dir.E, Dir.S};
//		
//		benderB.asignarRuta(direccionesB);
//		
//		lab.insertarRobot(benderB);
//		
//		Sonny sonnyS = new Sonny("YoRobot", 'S', 1, lab.salaInicial());
//		
//		Dir[] direccionesS = {Dir.E, Dir.S, Dir.S, Dir.S, Dir.O, Dir.S, Dir.E, Dir.E, Dir.N,
//				 Dir.E, Dir.S, Dir.S, Dir.E, Dir.E};
//		
//		sonnyS.asignarRuta(direccionesS);
//		
//		lab.insertarRobot(sonnyS);
//		
//		Spirit spiritT = new Spirit("WallE", 'T', 1, lab.salaSuroeste());
//		
//		Dir[] direccionesT = {Dir.N, Dir.N, Dir.N, Dir.E, Dir.S, Dir.E, Dir.N, Dir.N,
//				 Dir.E, Dir.N, Dir.E, Dir.E, Dir.S, Dir.S, Dir.S, Dir.S, Dir.S};
//		
//		spiritT.asignarRuta(direccionesT);
//		
//		lab.insertarRobot(spiritT);
//		
//		LinkedList<Llave> llavesAsimo = new LinkedList<Llave>();
//		for (int i = 0; i < conjuntoLlaves.length; i++) {
//			Llave dato = conjuntoLlaves[i];
//			llavesAsimo.addLast(dato);
//
//		}
//		 
//		Asimo asimoA = new Asimo("C-3PO", 'A', 1, lab.salaSalida());
//		
//		Dir [] direccionesA = {Dir.N, Dir.N, Dir.O, Dir.N, Dir.N, Dir.O, Dir.S, Dir.O,
//				 Dir.O, Dir.N, Dir.N, Dir.O, Dir.S, Dir.S, Dir.S, Dir.S, Dir.S,
//	 			 Dir.E, Dir.E, Dir.E, Dir.E, Dir.E};	
//		
//		asimoA.asignarRuta(direccionesA);
//		
//		lab.insertarRobot(asimoA);
		
		lab.abrirFichero("Prueba.log");
		for (int i = 0; i < maxTurnos; i++) {
			if (!lab.getPuerta().estaAbierta()){
				lab.procesar(i);
				System.out.println(lab);
				lab.escribirEnFichero(lab.toString());
			}
			else
				i = maxTurnos;
		}
		lab.cerrarFichero();
		
		
	}
}
