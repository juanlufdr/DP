package robots;

import java.util.LinkedList;

import laberinto.Llave;
import laberinto.Puerta;
import laberinto.Sala;
import laberinto.LabSim.Dir;

import ed.Queue;

public class Robot {
	/** Nombre del robot. */
	private String nombre;
	/** Marca del robot*/
	private char id;
	/** Turno inicial con el que empieza el robot. */
	private int turno_Inicial;
	/**	Último turno que tiene el robot. */
	private int turno_Actual;
	/** Sala en la que se encuentra el robot. */
	private Sala sala_Actual;
	/** Lista de las direcciones que sigue el robot para moverse. */
	private LinkedList<Dir> ruta;
	/** Lista de las llaves que tiene el robot. */
	protected LinkedList<Llave> llaves_Recogidas;

	/**
	 * Método constructor parametrizado de la clase Robot
	 * 
	 * @param nombre
	 * @param id
	 * @param turno_inicial
	 * @param sala_Actual
	 */
	public Robot(String nombre, char id, int turno_inicial, Sala sala_Actual) {
		this.nombre = nombre;
		this.id = id;
		this.turno_Inicial = turno_inicial;
		this.turno_Actual = turno_inicial;
		this.sala_Actual = sala_Actual;
		this.llaves_Recogidas = new LinkedList<Llave>();
		this.ruta = new LinkedList<Dir>();

	}

	/**
	 * Método constructor parametrizado de la clase Robot
	 * 
	 * @param nombre
	 * @param id
	 * @param turno_inicial
	 * @param sala_Actual
	 * @param llaves_recogidas
	 */
//	public Robot(String nombre, char id, int turno_inicial, Sala sala_Actual,
//			LinkedList<Llave> llaves_recogidas) {
//		this.nombre = nombre;
//		this.id = id;
//		this.turno_Inicial = turno_inicial;
//		this.turno_Actual = turno_inicial;
//		this.sala_Actual = sala_Actual;
//		this.llaves_Recogidas = llaves_recogidas;
//		this.ruta = new LinkedList<Dir>();
//	}

	/**
	 * Devuelve el nombre del robot.
	 * 
	 * @return Nombre del robot.
	 */
	public String getNombre() {
		return nombre;
	}

	/**
	 * Inserta el nombre pasado por parámetro al robot.
	 * @param nombre
	 * 		  Nombre del robot.
	 */
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	/**
	 * Devuelve la marca del robot.
	 * 
	 * @return Marca del robot.
	 */
	public char getId() {
		return id;
	}

	/**
	 * Inserta la marca pasada por parámetro al robot.
	 * @param id
	 * 		  Marca del robot.
	 */
	public void setId(char id) {
		this.id = id;
	}

	/**
	 * Devuelve el turno inicial del robot.
	 * 
	 * @return Turno inicial del robot.
	 */
	public int getTurno_Inicial() {
		return turno_Inicial;
	}

	/**
	 * Inserta el turno inicial pasado por parámetro al robot.
	 * @param turno_Inicial
	 * 		  Turno inicial del robot.
	 */
	public void setTurno_Inicial(int turno_Inicial) {
		this.turno_Inicial = turno_Inicial;
	}

	/**
	 * Devuelve el turno actual del robot.
	 * 
	 * @return Turno actual del robot.
	 */
	public int getTurno_Actual() {
		return turno_Actual;
	}
	
	/**
	 * Inserta el turno actual pasado por parámetro al robot.
	 * @param turno_Actual
	 * 		  Turno actual del robot.
	 */
	public void setTurno_Actual(int turno_Actual) {
		this.turno_Actual = turno_Actual;
	}

	/**
	 * Devuelve la lista de direcciones del robot.
	 * 
	 * @return Lista de direcciones del robot.
	 */
	public LinkedList<Dir> getRuta() {
		return ruta;
	}

	/**
	 * Inicializa la lista de las direcciones del robot con la lista pasada por parámetro.
	 * 
	 * @param ruta
	 * 		  Lista que contiene las direcciones del robot.
	 */
	public void setRuta(LinkedList<Dir> ruta) {
		this.ruta = ruta;
	}
	
	/**
	 * Devuelve la sala en la que se encuentra el robot.
	 * 
	 * @return Sala actual del robot.
	 */
	public Sala getSala_Actual() {
		return sala_Actual;
	}

	/**
	 * Inserta la sala en la que se encuentra el robot pasada por parámetro.
	 * 
	 * @param sala_Actual
	 * 		  Sala actual del robot
	 */
	public void setSala_Actual(Sala sala_Actual) {
		this.sala_Actual = sala_Actual;
	}

	/**
	 * Devuelve la lista de las llaves del robot.
	 * 
	 * @return Lista de llaves del robot.
	 */
	public LinkedList<Llave> getLlaves_Recogidas() {
		return llaves_Recogidas;
	}

	/**
	 * Inicializa la lista de llaves del robot con la lista pasada por parámetro.
	 * 
	 * @param llaves_Recogidas
	 * 		  Lista que contiene las llaves del robot.
	 */
	public void setLlaves_Recogidas(LinkedList<Llave> llaves_Recogidas) {
		this.llaves_Recogidas = llaves_Recogidas;
	}

	/**
	 * Método que realiza la acción de abrir la puerta.
	 * @param p
	 * 		  Puerta que se quiere abrir.
	 */
	private void accionPuerta(Puerta p) {
		if (!this.llaves_Recogidas.isEmpty()) {
			p.abrirPuerta(this.llaves_Recogidas.getLast());
			this.llaves_Recogidas.removeLast();
		}

	}

	/**
	 * Asigna la ruta que debe seguir el robot con las direcciones pasadas por parámetro.
	 * @param ruta
	 * 		  Ruta que va a seguir el robot.
	 */
	public void asignarRuta(Dir[] ruta) {
		for (int i = 0; i < ruta.length; i++) {
			this.ruta.add(ruta[i]);
		}

	}

	/**
	 * Movimiento que realizará el robot a la sala correspondiente dependiendo de la ruta asignada.
	 */
	protected void movimiento() {
		
		if (!this.ruta.isEmpty()) {
			if (this.ruta.getFirst() == Dir.N) {
				if (this.sala_Actual.getNorte() != null) {
					this.sala_Actual = this.sala_Actual.getNorte();
					this.sala_Actual.getRobots().addLast(this);
				}
			}
			if (this.ruta.getFirst() == Dir.S) {
				if (this.sala_Actual.getSur() != null) {
					this.sala_Actual = this.sala_Actual.getSur();
					this.sala_Actual.getRobots().addLast(this);
				}
			}
			if (this.ruta.getFirst() == Dir.E) {
				if (this.sala_Actual.getEste() != null) {
					this.sala_Actual = this.sala_Actual.getEste();
					this.sala_Actual.getRobots().addLast(this);
				}
			}
			if (this.ruta.getFirst() == Dir.O) {
				if (this.sala_Actual.getOeste() != null) {
					this.sala_Actual = this.sala_Actual.getOeste();
					this.sala_Actual.getRobots().addLast(this);
				}
			}
			this.ruta.removeFirst();
		} else
			this.sala_Actual.insertarRobot(this);
		

	}

	/**
	 * Método que realiza la acción de recoger la primera llave de la sala en la que se encuentre el robot.
	 */
	private void accionLlave() {
		if (!this.sala_Actual.getLlaves_sala().estaVacia()) {
			this.llaves_Recogidas.addLast(this.sala_Actual
					.extraerPrimeraLlave());
		}
	}

	/**
	 * Método que realiza todas las acciones del robot (accionPuerta, movimiento y accionLlave) dependiendo del turno del laberinto y del robot.
	 * 
	 * @param sala_Puerta
	 * 		  Sala en la que se encuentra la puerta.
	 * @param p
	 * 		  Puerta sobre la que se realizará la acción.
	 * @param turno
	 * 		  Turno del laberinto.
	 */
	public void acciones(int sala_Puerta, Puerta p, int turno) {
		if (turno == turno_Actual) {

			if (this.sala_Actual.getId_sala() == sala_Puerta) {
				this.accionPuerta(p);
				this.sala_Actual.insertarRobot(this);
			} else {
				this.movimiento();
				if (!this.sala_Actual.getLlaves_sala().estaVacia()) {
					this.accionLlave();
				}
			}
			this.turno_Actual++;
		} else
			this.sala_Actual.insertarRobot(this);

	}

	public String toString() {

		return ("(" + this.nombre + ":" + this.id + ":"
				+ this.sala_Actual.getId_sala() + ":" + this.turno_Actual + ":"
				+ this.llaves_Recogidas + ")");
	}

}
